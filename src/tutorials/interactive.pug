extends ./tutorial_layout.pug

block title
    | Interactive Tutorial | Beam Developers

block tutorialTitle
    h1 Build an Interactive Robot

block tutorialContent
    h2#intro Introduction
    p.
        Our interactive platform communicates using #[a(href='https://developers.google.com/protocol-buffers/' target='_blank') Google's Protocol Buffer]
        specification over a standard secure websocket protocol (wss) connection. Viewers' inputs from the site are sent to Beam's aggregator
        server, which analyzes them for you, before being sent to your Robot.

    h2#controlEditor Registering a Game On Beam
    p.
        Head over to the #[a(href='https://beam.pro/lab' target='_blank') Developer Lab] and click the 'Interactive Games' tab. Click the plus
        button next to 'My Games', and name the game whatever you'd like.
        Hit 'Create Game'.
    p.
        You’re now in the control editor. For our simple robot, we just want to
        be able to record joystick input. Click the Joystick Tab on the right
        side of the screen and then click 'New'.

    p.
        Expand the joystick's settings by clicking the arrow on the right of your new joystick and check the 'Coords (Mean)' analysis. Drag the Joystick onto the control grid on the left.
    p.
        The final result should look like this:
    img(src='/img/tutorials/interactive/joystick.png' alt='Interactive joystick configuration')

    p.
        Everything else can be left as default. Click Save. We're finished with the control editor. Let's get started on writing the code!

    h2#code Writing the Code
    p.
        We’re going to be using our #[a(href='https://github.com/WatchBeam/beam-interactive-node' target='_blank') Node],
        #[a(href='https://github.com/WatchBeam/beam-interactive-java' target='_blank') Java]
        and #[a(href='https://github.com/WatchBeam/beam-interactive-python' target='_blank') Python] to build a simple Robot.
        Users will be able to visit your channel on Beam, and control the mouse
        movement on your screen.

    +bsTabs('interactive_guide', {
        node: 'Node',
        java:'Java',
        python: 'Python'
    })
        +bsTabItem('interactive_guide', 'node')
            h3 Prerequisites
            ol
                li.
                    Get #[a(href='https://nodejs.org/en/' target='_blank') NodeJS and NPM] for your platform.
                li.
                    Create a #[a(href='https://docs.npmjs.com/cli/init' target='_blank') new project] with npm.
                li.
                    Run #[code npm i -S beam-client-node beam-interactive-node robotjs]
            h3 Usage
            p.
                Let's start by importing all of the modules we'll need, and define
                our username and password.

            +highlightFile('javascript','./tutorials/code/node/interactive/1.js')
            p.
                To connect to Beam Interactive, we need to authenticate as our user specified above
                using #[code beam-client-node]. We can use password-based authentication to do this.
                Once authenticated, we're asking the API to join a channel as a robot with #[code beam.game.join],
                passing your channel ID. We'll use the response from this to create a robot in
                the next step.
            +highlightFile('javascript','./tutorials/code/node/interactive/2.js')
            p.
                The join request should resolve with something like this
            +highlightFile('json','./tutorials/code/node/interactive/2_response.json')
            p.
                We can use these details to create a robot by writing the #[code createRobot] function.
            +highlightFile('javascript','./tutorials/code/node/interactive/3.js')
            p.
                Once we have a robot we need to perform a handshake with the interactive servers and then
                hook up event handlers so that a joystick on beam is bound to your mouse.
                We do this by creating the #[code performRobotHandShake] and #[code setupRobotEvents] functions.
            +highlightFile('javascript','./tutorials/code/node/interactive/4.js')
            p.
                This function takes our Robot instance and initiates a handshake, An error will be
                reported if a problem occurs during this process. Once its complete you'll get regular
                reports from Beam as a #[code report] event on the robot object.
            p.
                As we've only registered a Joystick control on Beam we'll only get joystick updates.
                These come in an array within the report. As we've selected mean, the mean of all
                the viewers joysticks will be contained within the coordMean object. We take this
                mean and apply it to the mouse position.

                The final code can be found below:
            +highlightFile('java','./tutorials/code/node/interactive/5.js')
        +bsTabItem('interactive_guide', 'java')
            h3 Prerequisites
            include ./java_prereqs.pug
            h3 Project Setup
            p.
                Setup a standard project for your environment and include
                #[a(href='https://github.com/WatchBeam/beam-client-java' target='_blank') beam-client-java]
                and #[a(href='https://github.com/WatchBeam/beam-interactive-java' target='_blank') beam-interactive-java]
                as dependancies.
            include ./snippets/java/interactive_project_manager.pug
            h3 Usage
            p.
                Let's start by creating a Main class for the Java application and
                importing all of the required packages. We'll also initialize a few
                objects. A instance of the BeamAPI and an instance of the AWT Robot class
                which will allow us to control the mouse.
            +highlightFile('java','./tutorials/code/java/interactive/1.java')
            p.
                Next we need to log in to Beam using a valid username and password,
                and then supply the BeamAPI instance and our channel ID to the
                RobotBuilder.

            +highlightFile('java','./tutorials/code/java/interactive/2.java')
            p.
                The last thing to do is wire up a report handler that takes the joystick's
                coordMean and applys it to the mouse.
            +highlightFile('java','./tutorials/code/java/interactive/3.java')
            p.
                When you put everything together you get the final code which is below:
            +highlightFile('java','./tutorials/code/java/interactive/4.java')
        +bsTabItem('interactive_guide', 'python')
            h3 Prerequisites
            ol
                li Python 3
                li pip (Python Package Manager)
            p.
                Once you have the prerequisites, install the following modules.
                All three are available on pip and may be installed by using #[code pip install MODULE].
            ol
                li #[a(href='https://github.com/WatchBeam/beam-interactive-python' target='_blank') beam_interactive]
                li #[a(href='https://github.com/kennethreitz/requests' target='_blank') requests]
                li #[a(href='https://github.com/PyUserInput/PyUserInput' target='_blank') PyUserInput]
            p.
                Once installed, create a new file and add the required imports.
            +highlightFile('python','./tutorials/code/python/interactive/1.py')
            p.
                Next, we need to create a dictionary to store authentication details
                and some functions to authenticate the user and retrieve some data from Beam.
            +highlightFile('python','./tutorials/code/python/interactive/2.py')
            p.
                After that, we'll write our error and report handlers. Our report handler
                interacts with the mouse based on Interactive inputs.
            +highlightFile('python','./tutorials/code/python/interactive/3.py')
            p.
                The final step is to setup the coroutine that will run everything.
            +highlightFile('python','./tutorials/code/python/interactive/4.py')
            p.
                The full code is shown below.
            +highlightFile('python','./tutorials/code/python/interactive/5.py')

    h2#stream Start Streaming
    p.
        Head over to your channel page and click 'Go Interactive' on the bottom
        of the page. Now find your game and click the 'Play' button.

    p.
        You should now see "Waiting for interactive app to connect. Make sure to launch it!". At this point start your project through the usual method for your chosen language.

    p.
        If everything has gone well you should now see a joystick underneath your channel’s stream. Move the joystick and your mouse should move in that direction.

    h2 Want More Info?
    p.
        If you'd like more information on our Interactive system, checkout the #[a(href='/reference/interactive/index.html') reference guide].
    include ../snippets/help.pug
block tutorialMenu
    li: a(href='#intro') Introduction
    li: a(href='#controlEditor') Registering a Game On Beam
    li: a(href='#code') Writing The Code
    li: a(href='#stream') Start Streaming
